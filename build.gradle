buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-milestone" }
        mavenLocal()
    }
    dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.8.RELEASE") }
}

apply plugin: 'java'
apply plugin: "groovy"
apply plugin: 'eclipse'
apply plugin: 'build-dashboard'
apply plugin: 'codenarc'
apply from: './properties.gradle'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'sonar'

sourceCompatibility = 1.8

jar {
    baseName = 'springSecurityKata'
    version = '0.1.0'
}

war {
    baseName = 'springSecurityKata'
    version =  '0.1.0'
}

sonar {
    server { url = "http://localhost:9000" }
    database {
        url = "jdbc:mysql://localhost:3306/sonar"
        driverClassName = "com.mysql.jdbc.Driver"
        username = "sonar"
        password = "sonar"
    }
}


sourceSets {
    intTest
    generated {
        java { srcDirs = ['src/main/generated']}
    }
    main {
        java { srcDir 'src/main/java' }
        groovy { srcDir 'src/main/groovy' }
        resources { srcDir 'src/main/resources' }
    }
    test {
        java { srcDir 'src/test/java' }
        groovy { srcDir 'src/test/groovy' }
        resources { srcDir 'src/test/resources' }
    }
}


repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-snapshot" }
    maven { url "http://repo.codahale.com/" }
}

/*configurations {
 providedRuntime
 }*/

dependencies {

    compile("com.mysema.querydsl:querydsl-core:$queryDslVersion")
    compile("com.mysema.querydsl:querydsl-codegen:$queryDslVersion")
    compile("com.mysema.querydsl:querydsl-apt:$queryDslVersion")
    compile("com.mysema.querydsl:querydsl-mongodb:$queryDslVersion")



    compile ("org.codehaus.groovy:groovy:${groovyVersion}")
    compile("org.springframework.boot:spring-boot-starter-web")
   // compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
 

    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile ("org.springframework.hateoas:spring-hateoas:0.16.0.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-logging")


    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.jasypt:jasypt:1.9.2")
    compile ("org.jasypt:jasypt-spring31:1.9.2")
    compile ("javax.mail:mail:1.4.7")

    compile ("org.springframework:spring-core:${springVersion}"){ exclude(module: 'commons-logging') }
    compile ("org.springframework:spring-beans:${springVersion}"){ exclude(module: 'commons-logging') }
    compile ("org.springframework:spring-context:${springVersion}"){ exclude(module: 'commons-logging') }
    compile ("org.springframework:spring-context-support:${springVersion}"){ exclude(module: 'commons-logging') }
    
    //compile ("org.springframework:spring-orm:${springVersion}"){ exclude(module: 'commons-logging') }
    //compile ("org.springframework:spring-tx:${springVersion}"){ exclude(module: 'commons-logging') }
    compile ("org.springframework:spring-aop:${springVersion}"){ exclude(module: 'commons-logging') }

    compile ("org.springframework:spring-aspects:${springVersion}"){ exclude(module: 'commons-logging') }
    compile ("org.springframework:spring-webmvc:${springVersion}"){ exclude(module: 'commons-logging') }


    compile ("com.sun.jersey:jersey-bundle:1.18")

    compile("org.projectlombok:lombok:${lombokVersion}")
    compile("com.google.guava:guava:${guavaVersion}")


    compile ("javax.validation:validation-api:${javaxValidationVersion}")
    compile ("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")
    compile ("javax.el:el-api:2.2")
    compile ("org.glassfish.web:el-impl:2.2")

    compile("org.hdiv:hdiv-core:2.1.8"){ exclude(module: 'commons-logging') }
    compile("org.hdiv:hdiv-config:2.1.8"){ exclude(module: 'commons-logging')}
    
    compile("org.hdiv:hdiv-spring-mvc:2.1.8"){ exclude(module: 'commons-logging')} 
    compile("org.hdiv:hdiv-thymeleaf:2.1.8"){ exclude(module: 'commons-logging') }
    
    compile("org.apache.httpcomponents:httpclient:${httpClientVersion}")
    compile("org.apache.httpcomponents:fluent-hc:${httpClientVersion}")


    compile ("com.jayway.restassured:rest-assured:2.3.3")
    compile ("com.jayway.jsonpath:json-path:0.9.1")

    
   compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity3:2.1.1.RELEASE")
    compile("org.thymeleaf:thymeleaf-spring4:2.1.3.RELEASE")
    compile("org.webjars:jquery:2.1.1")
    compile("org.webjars:bootstrap:3.2.0")

    compile("com.google.code.gson:gson:${gsonVersion}")
    compile("org.yaml:snakeyaml:{snakeYamlVersion}")
    //   / providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")


    testCompile("org.hamcrest:hamcrest-all:$hamcrestVersion")
    compile("org.mockito:mockito-all:$mockitoVersion")
    testCompile("junit:junit:$junitVersion")
    testCompile("org.easytesting:fest-assert:${festAssertVersion}")
    testCompile ("org.springframework:spring-test:${springVersion}")



}
uploadArchives {
    repositories { flatDir { dirs 'repos' } }
}
/*configurations.all {
resolutionStrategy {
    failOnVersionConflict()
  }
}*/
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.springframework') {
            details.useVersion '4.1.0.RELEASE'
        }
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
        "-proc:only",
        "-processor",
        "com.mysema.query.apt.QuerydslAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

task testMongo(type: Test) {
    testLogging.showStandardStreams = true
    systemProperty 'spring.profiles.active','mongodb'
}

test {
    testLogging.showStandardStreams = true
    systemProperty 'spring.profiles.active','dev'
}


compileJava {
    dependsOn generateQueryDSL
    source sourceSets.generated.java.srcDirs.iterator().next()
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}



task wrapper(type: Wrapper) { gradleVersion = '2.1' }
